#!/usr/bin/env bash

set -e

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

unset GIT_DIR

for BUILDPACK in $(cat $1/.buildpacks); do
  if [[ ${BUILDPACK:0:2} == '//' ]]; then
    continue
  fi
  if [[ ${BUILDPACK:0:1} == '#' ]]; then
    script=$(echo $BUILDPACK | awk -F'#' '{print $2}')
    echo "=====> Running Script: $script"
    /bin/bash $1/.scripts/$script
    continue
  fi

  dir=$(mktemp -t buildpackXXXXX)
  rm -rf $dir

  url=$(echo $BUILDPACK | awk -F'#' '{print $1}')
  branch=$(echo $BUILDPACK | awk -F'#' '{print $2}')
  user=$(echo $BUILDPACK | awk -F'#' '{print $3}')
  run_as_user=""
  if [ "$user" != "" ]; then
    if ! id -u $user >/dev/null 2>&1; then
      echo "=====> Adding User: $user"
      sudo adduser $user --quiet --disabled-login --gecos ""
    fi
    sudo passwd -q -d $user
    sudo adduser --quiet $user sudo
    sudo adduser --quiet $user slugbuilder

    groups $user
    echo "=====> Running as User: $user"
    run_as_user="sudo -u "$user" env STACK=$STACK REQUEST_ID=$REQUEST_ID "
  fi

  if [ "$branch" == "$url" ]; then
    branch=""
  fi

  if [ "$url" != "" ]; then
    echo "=====> Downloading Buildpack: $url"

    if [[ "$url" =~ \.tgz$ ]]; then
      mkdir -p "$dir"
      curl -s "$url" | tar xvz -C "$dir" >/dev/null 2>&1
    else
      git clone $url $dir >/dev/null 2>&1
    fi

    sudo chmod -R 775 $1 $2 $3 $dir
    sudo chown -R $user $1 $2 $3 $dir

    cd $dir

    if [ "$branch" != "" ]; then
      git checkout $branch >/dev/null 2>&1
    fi

    # we'll get errors later if these are needed and don't exist
    chmod -f +x $dir/bin/{detect,compile,release} || true

    framework=$($dir/bin/detect $1)

    if [ $? == 0 ]; then
      echo "=====> Detected Framework: $framework"
      eval $run_as_user$dir/bin/compile $1 $2 $3

      if [ "$user" != "" ]; then
        sudo chmod -R 775 $1 $2 $3
      fi

      if [ $? != 0 ]; then
        exit 1
      fi

      if [ -x $dir/bin/release ]; then
        eval $run_as_user$dir/bin/release $1 > $1/last_pack_release.out
      fi
    fi
  fi
done

if [ -e $1/last_pack_release.out ]; then
  echo "Using release configuration from last framework ($framework)."
fi
